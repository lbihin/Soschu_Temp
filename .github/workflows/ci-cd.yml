name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permet de lancer le workflow manuellement

jobs:
  test-and-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [macos-latest, windows-latest]
        os: [macos-latest]
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: poetry run pytest

    - name: Build executable
      run: poetry run build-exe
      
    # - name: Upload artifact (Windows)
    - name: Upload artifact
      # if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: soschu-temp-windows
        path: dist/soschu_temp.exe
        retention-days: 7
        
    # - name: Upload artifact (macOS)
    #   if: matrix.os == 'macos-latest'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: soschu-temp-macos
    #     path: dist/soschu_temp
    #     retention-days: 7
