"""
D√©monstration de l'architecture modulaire refactoris√©e.

Ce script montre comment utiliser les services ind√©pendants pour le traitement,
la pr√©visualisation et la g√©n√©ration de fichiers.
"""

import logging
import sys
from pathlib import Path

# Add src directory to Python path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from core import CoreProcessor
from file_generation_service import create_file_generation_service
from output_generator import create_try_generator
from preview import create_preview_service


def demo_modular_workflow():
    """D√©montre le workflow modulaire avec s√©paration des responsabilit√©s."""

    # Configuration du logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    logger.info("=== D√©monstration de l'Architecture Modulaire ===")

    # Param√®tres de test
    weather_file = "tests/data/TRY2045_488284093163_Jahr.dat"
    solar_file = "tests/data/Solare Einstrahlung auf die Fassade.html"
    threshold = 200.0  # W/m¬≤
    delta_t = 7.0  # ¬∞C
    output_dir = "test_output"

    # V√©rifier que les fichiers existent
    if not Path(weather_file).exists():
        logger.error(f"Weather file not found: {weather_file}")
        return

    if not Path(solar_file).exists():
        logger.error(f"Solar file not found: {solar_file}")
        return

    try:
        # √âTAPE 1: Traitement des donn√©es uniquement (pas de g√©n√©ration de fichiers)
        logger.info("√âtape 1: Traitement des donn√©es avec CoreProcessor")
        processor = CoreProcessor()
        processing_result = processor.process_all_facades(
            weather_file, solar_file, threshold, delta_t
        )

        logger.info(
            f"Traitement termin√©: {processing_result.total_adjustments} ajustements totaux"
        )
        logger.info(
            f"Fa√ßades trait√©es: {list(processing_result.adjustments_by_facade.keys())}"
        )

        # √âTAPE 2: G√©n√©ration de preview pour l'interface utilisateur
        logger.info("√âtape 2: G√©n√©ration de preview avec PreviewService")
        preview_service = create_preview_service()
        preview_result = preview_service.create_preview_from_processing_result(
            processing_result, max_sample_adjustments=15
        )

        logger.info(
            f"Preview cr√©√© avec {len(preview_result.sample_adjustments)} √©chantillons"
        )

        # Afficher quelques statistiques de preview
        stats = preview_service.get_processing_statistics(processing_result)
        logger.info(
            f"Statistiques: {stats['total_facades']} fa√ßades, {stats['total_adjustments']} ajustements"
        )

        # √âTAPE 3: G√©n√©ration de fichiers avec FileGenerationService
        logger.info("√âtape 3: G√©n√©ration de fichiers avec FileGenerationService")

        # Option 3a: G√©n√©ration directe depuis ProcessingResult
        file_service = create_file_generation_service()
        output_files_1 = file_service.generate_files_from_processing_result(
            processing_result,
            output_dir=f"{output_dir}/direct",
            selected_facades=None,  # Toutes les fa√ßades
        )

        logger.info(f"Fichiers g√©n√©r√©s directement: {len(output_files_1)}")

        # Option 3b: G√©n√©ration depuis PreviewResult
        output_files_2 = file_service.generate_files_from_preview_result(
            preview_result,
            output_dir=f"{output_dir}/from_preview",
            selected_facades=list(processing_result.adjustments_by_facade.keys())[
                :2
            ],  # Seulement 2 fa√ßades
        )

        logger.info(f"Fichiers g√©n√©r√©s depuis preview: {len(output_files_2)}")

        # √âTAPE 4: D√©monstration de la flexibilit√© avec diff√©rents g√©n√©rateurs
        logger.info("√âtape 4: Utilisation de diff√©rents g√©n√©rateurs de sortie")

        # Utilisation d'un g√©n√©rateur sp√©cifique
        try_generator = create_try_generator()
        custom_file_service = create_file_generation_service(try_generator)

        # G√©n√©ration d'un fichier sp√©cifique
        if processing_result.adjusted_weather_data_by_facade:
            # Utiliser la premi√®re fa√ßade qui existe vraiment
            facade_key = list(processing_result.adjusted_weather_data_by_facade.keys())[
                0
            ]
            single_file = custom_file_service.generate_single_facade_file(
                processing_result,
                facade_key,
                f"{output_dir}/single/{facade_key}_custom.dat",
            )
            logger.info(f"Fichier sp√©cifique g√©n√©r√©: {single_file}")
        else:
            logger.warning("Aucune fa√ßade trouv√©e dans les r√©sultats de traitement")

        # √âTAPE 5: Validation et v√©rification
        logger.info("√âtape 5: Validation des r√©sultats")

        # V√©rifier que les r√©pertoires ont √©t√© cr√©√©s
        if file_service.validate_output_directory(output_dir):
            logger.info("R√©pertoire de sortie valid√© avec succ√®s")

        # Afficher les formats support√©s
        supported_formats = file_service.get_supported_formats()
        logger.info(f"Formats support√©s: {supported_formats}")

        # R√©sum√© final
        logger.info("=== R√©sum√© de la D√©monstration ===")
        logger.info(
            f"‚úÖ Donn√©es trait√©es: {processing_result.total_adjustments} ajustements"
        )
        logger.info(
            f"‚úÖ Preview g√©n√©r√©e: {len(preview_result.sample_adjustments)} √©chantillons"
        )
        logger.info(
            f"‚úÖ Fichiers g√©n√©r√©s: {len(output_files_1) + len(output_files_2) + 1}"
        )
        logger.info("‚úÖ Architecture modulaire valid√©e!")

        return {
            "processing_result": processing_result,
            "preview_result": preview_result,
            "output_files": {**output_files_1, **output_files_2},
        }

    except Exception as e:
        logger.error(f"Erreur pendant la d√©monstration: {e}")
        raise


def demo_gui_integration_pattern():
    """D√©montre le pattern d'int√©gration GUI recommand√©."""

    logger = logging.getLogger(__name__)
    logger.info("=== Pattern d'Int√©gration GUI ===")

    # Pattern typique pour une interface utilisateur
    weather_file = "tests/data/TRY2045_488284093163_Jahr.dat"
    solar_file = "tests/data/Solare Einstrahlung auf die Fassade.html"
    threshold = 150.0
    delta_t = 5.0

    try:
        # 1. L'utilisateur clique sur "Analyser" - on fait le traitement
        logger.info("1. Traitement initial (clic sur Analyser)")
        processor = CoreProcessor()
        processing_result = processor.process_all_facades(
            weather_file, solar_file, threshold, delta_t
        )

        # 2. L'utilisateur veut voir un aper√ßu - on g√©n√®re la preview
        logger.info("2. G√©n√©ration preview (clic sur Aper√ßu)")
        preview_service = create_preview_service()
        preview_result = preview_service.create_preview_from_processing_result(
            processing_result
        )

        # 3. L'interface affiche les statistiques et √©chantillons
        logger.info("3. Affichage des donn√©es dans l'interface")
        stats = preview_service.get_processing_statistics(processing_result)

        # Simulation de l'affichage GUI
        print(f"   üìä Fa√ßades trouv√©es: {stats['total_facades']}")
        print(f"   üìä Ajustements totaux: {stats['total_adjustments']}")
        print(f"   üìä Exemples d'ajustements:")
        for i, adj in enumerate(preview_result.sample_adjustments[:3]):
            print(
                f"      {i+1}. {adj.datetime_str}: {adj.original_temp:.1f}¬∞C ‚Üí {adj.adjusted_temp:.1f}¬∞C ({adj.facade_id})"
            )

        # 4. L'utilisateur s√©lectionne des fa√ßades et clique sur "G√©n√©rer"
        logger.info("4. G√©n√©ration de fichiers (clic sur G√©n√©rer)")
        file_service = create_file_generation_service()

        # Simulation de s√©lection utilisateur (premi√®res 2 fa√ßades)
        selected_facades = list(processing_result.adjustments_by_facade.keys())[:2]
        output_files = file_service.generate_files_from_processing_result(
            processing_result,
            output_dir="gui_output",
            selected_facades=selected_facades,
        )

        logger.info(f"‚úÖ Pattern GUI d√©montr√© - {len(output_files)} fichiers g√©n√©r√©s")

    except Exception as e:
        logger.error(f"Erreur dans le pattern GUI: {e}")
        raise


if __name__ == "__main__":
    print("üöÄ D√©monstration de l'Architecture Modulaire Soschu")
    print("=" * 60)

    # D√©monstration principale
    demo_results = demo_modular_workflow()

    print("\n" + "=" * 60)

    # D√©monstration du pattern GUI
    demo_gui_integration_pattern()

    print("\nüéâ D√©monstration termin√©e avec succ√®s!")
    print("\nLes services sont maintenant compl√®tement modulaires:")
    print("  ‚Ä¢ CoreProcessor: traitement de donn√©es uniquement")
    print("  ‚Ä¢ PreviewService: g√©n√©ration d'aper√ßus pour GUI")
    print("  ‚Ä¢ FileGenerationService: g√©n√©ration de fichiers de sortie")
    print("  ‚Ä¢ OutputGenerator: strat√©gies de format de sortie")
